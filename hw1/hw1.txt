is_member was the base of my assignment, checking recursively if a value is
a member of a set or OCaml List. With subset, equal_sets, and set_union,
I approached the functions mainly using type matching where the functions
handle the empty set case appropriately.
With set_all_union, I used the StdLib function List.fold_left to append all
values of a union set by reusing the set_union function.
With all the computing fixed points and while_seq, it was just a matter of
understanding the recursive nature of the problem, understanding the need to
hold a previous value with backtracking and abstraction using the apply_p_times
for the computed_periodic_point.
Question 9, the bulk of the project, relied on a number of helper functions
starting from the level of checking if a symbol is terminable, then checking
each value in the rhs for a terminable symbol. With these helper functions,
I was able to evaluate the initially terminable rules with the check_terminable
_rules function which is able to iterate through the list of rules and returns
a list of terminable symbols.
One iteration of this would not suffice, and I would want to check all
terminable symbols on multiple iterations, which would be used by
get_terminable_symbols in order to correctly evaluate the list of terminable
symbols.
After getting a definitive list of terminable symbols, I used remove_rules to
remove the rules that contianed unterminable symbols on the rhs.
All of this in composition gave me filter_blind_alleys.
I was thinking about doing this differently, with a dfs instead of this supposed
bfs approach, however the usage of computed_fixed_point was rather tempting
to use given that this is basically somewhat of a bfs approach on the list of
rules.
